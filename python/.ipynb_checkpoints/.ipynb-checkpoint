{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **闭包**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gen_func1(n):\n",
    "    for i in range(n):\n",
    "        callback = lambda : i\n",
    "        yield callback\n",
    "\n",
    "def gen_func2(n):\n",
    "    for i in range(n):\n",
    "        def genf(i):\n",
    "            return lambda: i\n",
    "        callback = genf(i)\n",
    "        yield callback\n",
    "\n",
    "def test(func):\n",
    "    l = []\n",
    "    print(func)\n",
    "    for f in func(2):\n",
    "        print(\"first loop:\",f())\n",
    "        l.append(f)\n",
    "    for f in l:\n",
    "        print(\"second loop:\",f())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<function gen_func1 at 0x0000024787700620>\n",
      "first loop: 0\n",
      "first loop: 1\n",
      "second loop: 1\n",
      "second loop: 1\n",
      "<function gen_func2 at 0x0000024787700F28>\n",
      "first loop: 0\n",
      "first loop: 1\n",
      "second loop: 0\n",
      "second loop: 1\n"
     ]
    }
   ],
   "source": [
    "test(gen_func1)\n",
    "test(gen_func2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4]\n",
      "[0, 1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "print([i() for i in gen_func1(5)])\n",
    "print([i() for i in gen_func2(5)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<function __main__.gen_func1.<locals>.<lambda>()>,\n",
       " <function __main__.gen_func1.<locals>.<lambda>()>]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in gen_func1(2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<function __main__.gen_func2.<locals>.genf.<locals>.<lambda>()>,\n",
       " <function __main__.gen_func2.<locals>.genf.<locals>.<lambda>()>]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in gen_func2(2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
